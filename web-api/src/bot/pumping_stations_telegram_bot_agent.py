from enum import IntEnum
import hashlib
from telegram import BotCommand, Update
from telegram.ext import Updater, CommandHandler, ConversationHandler, CallbackContext, MessageHandler, Filters

from flask_ex import FlaskEx


class LoginConversationalStates(IntEnum):
    WAITING_FOR_LOGIN = 1
    WAITING_FOR_PASSWORD = 2


user_states = {}


class PumpingStationsTelegramBotAgent:

    def __init__(self, app: FlaskEx, token: str):
        self.app = app
        self.token = token
        self.updater = None

    def __start_command(self, update: Update, context: CallbackContext):
        chat_id = update.effective_chat.id

        accounts = self.app.get_accounts_settings().accounts
        authorized_users_ids = sum([a.telegram_ids for a in accounts.items], [])

        if chat_id in authorized_users_ids:
            account = next((a for a in accounts.items if chat_id in a.telegram_ids), None)
            update.message.reply_text(f"‚úÖ –í—ã —É–∂–µ –±—ã–ª–∏ —Ä–∞–Ω–Ω–µ–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã c —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é {account.login}!")
        else:
            update.message.reply_text("üîê –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /login.")

    def __login_command(self, update: Update, context: CallbackContext):
        chat_id = str(update.effective_chat.id)
        accounts = self.app.get_accounts_settings().accounts

        authorized_users_ids = sum([a.telegram_ids for a in accounts.items], [])

        if chat_id in authorized_users_ids:
            account = next((a for a in accounts.items if chat_id in a.telegram_ids), None)
            update.message.reply_text(f"‚úÖ –í—ã —É–∂–µ –±—ã–ª–∏ —Ä–∞–Ω–Ω–µ–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã c —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é {account.login}!")

            return ConversationHandler.END

        user_states[chat_id] = {"state": LoginConversationalStates.WAITING_FOR_LOGIN, "attempts": 0, "login": None}

        update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ üë§ –õ–û–ì–ò–ù –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏:")

        return LoginConversationalStates.WAITING_FOR_LOGIN

    def __receive_login(self, update: Update, context: CallbackContext):
        chat_id = str(update.effective_chat.id)
        login = update.message.text.strip()
        accounts = self.app.get_accounts_settings().accounts

        if login not in [a.login for a in accounts.items]:
            update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ üë•. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞."
            )

            return LoginConversationalStates.WAITING_FOR_LOGIN

        user_states[chat_id]["login"] = login
        user_states[chat_id]["state"] = LoginConversationalStates.WAITING_FOR_PASSWORD

        update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ üîë –ü–ê–†–û–õ–¨ –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏:")

        return LoginConversationalStates.WAITING_FOR_PASSWORD

    def __receive_password(self, update: Update, context: CallbackContext):
        chat_id = str(update.effective_chat.id)
        password = update.message.text.strip()
        login = user_states[chat_id]["login"]

        password_hash = hashlib.sha256(password.encode()).hexdigest()
        accounts = self.app.get_accounts_settings().accounts

        account = next((a for a in accounts.items if a.login == login))

        if account.password == password_hash:
            account.telegram_ids.append(str(chat_id))
            self.app.get_accounts_settings_repository().update(current_settings=None)

            del user_states[chat_id]

            update.message.reply_text(
                f"‚úÖ –í—Ö–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é {login}!\n" f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å üí¨ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!"
            )

            return ConversationHandler.END

        user_states[chat_id]["attempts"] += 1
        attempts_left = 3 - user_states[chat_id]["attempts"]

        if attempts_left > 0:
            update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π üîë –ü–ê–†–û–õ–¨. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {attempts_left}.\n–í–≤–µ–¥–∏—Ç–µ üîë –ü–ê–†–û–õ–¨ —Å–Ω–æ–≤–∞:"
            )

            return LoginConversationalStates.WAITING_FOR_PASSWORD

        del user_states[chat_id]
        update.message.reply_text(
            "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞.\n–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /login."
        )

        return ConversationHandler.END

    def __cancel_command(self, update: Update, context: CallbackContext):
        chat_id = str(update.effective_chat.id)

        if chat_id in user_states:
            del user_states[chat_id]

        update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

        return ConversationHandler.END

    def __logout_command(self, update: Update, context: CallbackContext):
        chat_id = str(update.effective_chat.id)
        accounts = self.app.get_accounts_settings().accounts
        authorized_users_ids = sum([a.telegram_ids for a in accounts.items], [])

        if chat_id in user_states:
            del user_states[chat_id]

        if chat_id in authorized_users_ids:
            account = next((a for a in accounts.items if chat_id in a.telegram_ids), None)
            if account is None:
                update.message.reply_text("‚ùå –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                account.telegram_ids.remove(chat_id)
                self.app.get_accounts_settings_repository().update(current_settings=None)
                update.message.reply_text("üîì –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω. –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚úñ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

        else:
            update.message.reply_text("‚ùå –í—Ö–æ–¥ –Ω–µ –±—ã–ª —Ä–∞–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞.")

    def __set_commands_menu(self):
        commands = [
            BotCommand("start", "üöÄ –ó–∞–ø—É—Å–∫ "),
            BotCommand("login", "üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"),
            BotCommand("logout", "üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"),
        ]

        self.updater.bot.set_my_commands(commands)

    def run(self):
        self.updater = Updater(self.token, use_context=True)
        dispatcher = self.updater.dispatcher

        dispatcher.add_handler(CommandHandler("start", self.__start_command))
        dispatcher.add_handler(
            ConversationHandler(
                entry_points=[CommandHandler("login", self.__login_command)],
                states={
                    LoginConversationalStates.WAITING_FOR_LOGIN: [
                        MessageHandler(Filters.text & ~Filters.command, self.__receive_login)
                    ],
                    LoginConversationalStates.WAITING_FOR_PASSWORD: [
                        MessageHandler(Filters.text & ~Filters.command, self.__receive_password)
                    ],
                },
                fallbacks=[CommandHandler("cancel", self.__cancel_command)],
            )
        )
        dispatcher.add_handler(CommandHandler("logout", self.__logout_command))

        self.__set_commands_menu()

        self.app.app_logger.info("Starting the pumping stations telegram bot polling...")

        self.updater.start_polling()
        # self.updater.idle()
